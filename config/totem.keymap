//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
       

#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"

#include <behaviors/rgbled_widget.dtsi>

#define BASE 0
#define SYM  1
#define NUM  2
#define NAV  3
#define FUN  4
#define FUN2  5
#define SYS  6
#define MEDIA  7

#define TAPPING_TERM 175
#define TD_TAPPING_TERM 225
#define QUICK_TAP_TERM 175
#define QUICK_TAP_MS QUICK_TAP_TERM
#define ADAPTIVE_KEY_TIMEOUT 2000

#define STRINGIFY(x) #x
#define EXPAND_AND_STRINGIFY(x) STRINGIFY(x)
#define ZMK_MACRO_STRINGIFY(x) EXPAND_AND_STRINGIFY(x)

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
// MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
// MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "


/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_MOD_MORPH(smart_shft,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_TAP_DANCE(num_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word NUM>, <&sl NUM>;  // reverse this for sticky-num on single tap
)
&num_word {
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};


ZMK_HOLD_TAP(lt2,
    flavor = "tap-preferred";
    tapping-term-ms = <50>;
    bindings = <&mo>, <&kp>;
    display-name = "Layer-Tap";
)

&mt {
  quick-tap-ms = <100>;
  global-quick-tap;
  flavor = "tap-preferred";
  tapping-term-ms = <170>;
};

#define MT_CORE                                                                \
  flavor = "tap-preferred";                                                    \
  tapping-term-ms = <220>;                                                     \
  quick-tap-ms = <220>;                                                        \
  require-prior-idle-ms = <220>; \
  hold-trigger-key-positions = <0>;
  


#undef COMBO_TERM
#define COMBO_TERM 50

ZMK_COMBO(esc, &kp ESC, LT4 LT3)
ZMK_COMBO(shifttab, &kp LS(TAB), LT1 LM1)
ZMK_COMBO(tab, &kp TAB, LT0 LM0)
ZMK_COMBO(undo, &kp LC(Z), LB4 LB3)
ZMK_COMBO(copycut, &mt LC(X) LC(C), LB3 LB2)
ZMK_COMBO(paste, &kp LC(V), LB2 LB1)
ZMK_COMBO(bkspc, &kp BSPC, RT0 RM0)
ZMK_COMBO(del, &kp DEL, RT4 RM4)
ZMK_COMBO(esc2, &kp ESC, RM0 RM1)
// ZMK_COMBO(media_play, &kp C_PP, 11 12 13)
ZMK_COMBO(media_layer, &mo MEDIA, LT3 LT2)

ZMK_MACRO(fotilde,
    bindings
        = <&macro_press &kp LS(TILDE)>
        , <&macro_tap &kp SPACE>
        ;
)

#define CTRL_TILDE &mt LCTRL GRAVE

/ {
keymap {
compatible = "zmk,keymap";

base_layer {
label= "BASE";
bindings = <
//             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &kp Q         &kp W         &kp E         &kp R         &kp T           &kp Y         &kp U         &kp I         &kp O         &kp P
//             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                &hml LGUI A   &hml LALT S   &hml LCTRL D  &hml LSHFT F  &kp G           &kp H         &hmr RSHFT J  &hmr RCTRL K  &hmr LALT L   &hmr RGUI SEMI
//╭────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
   CTRL_TILDE   &kp Z         &kp X         &kp C         &kp V         &kp B           &kp N         &kp M         &kp COMMA     &kp DOT       &kp FSLH      &mt RSHFT SQT
//╰────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                            SMART_NUM     &mt LSHFT BSPC &kp SPACE      &lt NAV RET   &lt2 SYM DEL  &lt FUN TAB
//                                         ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
>;
};


sym_layer {
label= "SYM";
bindings = <
//             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &kp EXCL      &kp AT        &kp RA(E)     &kp DLLR      &kp PIPE        &kp EQUAL     &kp LBKT      &kp RBKT      &kp RA(O)     &trans
//             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                &kp RA(A)     &kp RA(S)     &kp HASH      &kp STAR      &kp PRCNT       &kp MINUS     &kp LPAR      &kp RPAR      &kp RA(L)     &kp RA(O) 
//╭────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
   &trans       &kp RA(Z)     &kp RA(X)     &kp RA(C)     &kp AMPS      &kp CARET       &kp RA(N)     &kp LBRC      &kp RBRC      &fotilde      &kp BSLH      &kp RALT
//╰────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                            &trans        &trans        &kp UNDER       &trans        &trans        &trans      
//                                         ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
>;
};


num_layer {
label= "NUM";
bindings = <
//             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &trans        &trans        &trans        &trans        &trans          &kp EQUAL     &kp N7        &kp N8        &kp N9        &kp N0
//             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                &trans        &trans        &trans        &trans        &tog FUN        &kp MINUS     &kp N4        &kp N5        &kp N6        &kp KP_MULTIPLY
//╭────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
   &trans       &trans        &trans        &trans        &trans        &trans          &kp PLUS      &kp N1        &kp N2        &kp N3        &kp FSLH      &to BASE
//╰────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                            &trans        &trans        &trans          &trans        &kp N0        &kp KP_DOT
//                                         ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
>;
};

navi_layer {
label= "NAVI";
bindings = <
//             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &trans        &trans        &trans        &trans        &trans          &kp PG_UP     &kp HOME      &kp UP        &kp END       &kp PSCRN
//             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                &trans        &trans        &trans        &trans        &trans          &kp PG_DN     &kp LEFT      &kp DOWN      &kp RIGHT     &kp INS
//╭────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
   &trans       &trans        &trans        &trans        &trans        &trans          &trans        &kp LC(PG_UP) &kp LC(PG_DN) &trans        &trans        &trans
//╰────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                            &trans        &trans        &trans          &trans        &trans        &tog SYS
//                                         ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
>;
};


function_layer {
label= "FUNCTION";
bindings = <
//             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &kp F1        &kp F2        &kp F3        &kp F4        &trans          &trans        &trans        &trans        &trans        &trans
//             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                &kp F5        &kp F6        &kp F7        &kp F8        &tog FUN2       SMART_NUM     &trans        &trans        &trans        &trans  
//╭────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
   &trans       &kp F9        &kp F10       &kp F11       &kp F12       &trans          &trans        &trans        &trans        &trans        &trans        &caps_word
//╰────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                            &trans        &trans        &to BASE        &trans        &trans        &trans      
//                                         ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
>;
};


function2_layer {
label= "FUNCTION2";
bindings = <
//             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &to BASE      &kp F13       &kp F14       &kp F15       &tog SYS        &trans        &trans        &trans        &trans        &trans
//             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                &trans        &kp F16       &kp F17       &kp F18       &trans          &trans        &trans        &trans        &trans        &trans  
//╭────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
   &trans       &trans        &kp F19       &kp F20       &kp F21       &trans          &trans        &trans        &trans        &trans        &trans        &trans
//╰────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                            &trans        &trans        &to BASE        &trans        &trans        &trans      
//                                         ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
>;
};


system_layer {
label= "SYS";
bindings = <
//             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &sys_reset    &bt BT_CLR    &out OUT_TOG  &none         &bt BT_SEL 0    &none         &none         &none         &none         &sys_reset
//             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                &bootloader   &bt BT_NXT    &none         &none         &bt BT_SEL 1    &none         &none         &none         &none         &bootloader  
//╭────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
   &to BASE     &none         &bt BT_PRV    &none         &none         &bt BT_SEL 2    &none         &none         &none         &none         &none         &none
//╰────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                            &ind_bat      &ind_con      &to BASE        &to BASE      &ind_con      &ind_bat
//                                         ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
>;
};


media_layer {
label= "MEDIA";
            bindings = <
//             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &trans        &trans        &trans        &kp C_VOL_UP  &kp C_NEXT      &trans        &trans        &trans        &trans        &trans
//             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                &trans        &trans        &kp C_PP      &kp C_VOL_DN  &kp C_PREV      &trans        &trans        &trans        &trans        &trans  
//╭────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╮
   &trans       &trans        &trans        &trans        &kp C_MUTE    &trans          &trans        &trans        &trans        &trans        &trans        &trans         
//╰────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                            &trans        &trans        &to BASE        &trans        &trans        &trans      
//                                         ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
>;
};

};
};